; Test: xire-builtins  {{{1

(use gauche.test)
(test-start "xire-builtins")
(load "./bin/xirec")
(set! main #f)

(define (compile-expression expression)
  (define context (make-expression-context (make <xire-context>)))
  (tree->string (xire-compile expression context)))




; Expression  ;{{{1
(test-section "(?: expression then-part else-part)")  ;{{{2

(test* "It should be compiled properly."
       "(0 ? 1 : 2)"
       (compile-expression '(?: 0 1 2)))

(test* "It should raise error if the number of operands is less than 3."
       (test-error <error>)
       (compile-expression '(?: 0 1)))

(test* "It should raise error if the number of operands is greater than 3."
       (test-error <error>)
       (compile-expression '(?: 0 1 2 3)))




(test-section "comment")  ;{{{1

(test* "It should be available."
       #t
       (boolean (xire-lookup-macro 'comment)))

(test* "It should compile a given form into a Vim-script comment."
       '(("\"" () "\n")
         ("\"" (" " "foo") "\n")
         ("\"" (" " "foo" " " "bar") "\n"))
       (let ([expander (xire-lookup-macro 'comment)]
             [context (make-statement-context (make <xire-context>))])
         (list
           (expander '(comment) context)
           (expander '(comment "foo") context)
           (expander '(comment "foo" "bar") context))))

(test* "It should raise error for invalid arguments"
       (test-error <error>)
       (let1 expander (xire-lookup-macro 'comment)
         (expander '(comment "a" #\b "c")
                   (make-statement-context (make <xire-context>)))))

(test* "It should raise error for non-statement context"
       (test-error <error>)
       (let1 expander (xire-lookup-macro 'comment)
         (expander '(comment "a")
                   (make-expression-context (make <xire-context>)))))




;(test-section "template")  ;{{{1

;(test* "title"
;       expected-value
;       test-expression)




(test-end)  ;{{{1




; __END__
; vim: filetype=scheme foldmethod=marker

Testing xire-basics ...                                          Testing xire-basics ===========================================================
<define-xire-macro>------------------------------------------------------------
test It should define a xire macro in the current environment., expects (#f (< (original-form) = context >)) ==> ok
<xire-compile>-----------------------------------------------------------------
test It should raise error for a malformed script: (), expects #<<error>> ==> ok
test It should raise error for a malformed script: 'invalid-expression, expects #<<error>> ==> ok
test It should raise error for a malformed script: (no-such-macro), expects #<<error>> ==> ok
test It should raise error for a malformed script: (macro invlaid argument), expects #<<error>> ==> ok
test It should succeed to compile a valid script., expects ("\"" "I am a comment!") ==> ok
<xire-context>-----------------------------------------------------------------
<xire-environment>-------------------------------------------------------------
test It should exist., expects #t ==> ok
test It should have some entries in its macro table by default., expects #t ==> ok
test It should be a parameter., expects (overridden <xire-environment>) ==> ok
<xire-environment-copy>--------------------------------------------------------
test It should copy the current environment, expects ((#t #t) (#f #t) ((a) (a b))) ==> ok
test It should copy a given environment, expects ((#t #f #f) (#f #t #t) (#f #f #t) ((a) (b) (b c))) ==> ok
<xire-lookup-macro>------------------------------------------------------------
test It should return #f if there is no macro with the given name., expects #f ==> ok
test It should return the expander of a registered macro., expects (expanded-form (original-form)) ==> ok
test It should look up macro from a given environment., expects ((default-environment #f given-environment #f) (default-environment #f given-environment #t)) ==> ok
<xire-register-macro!>---------------------------------------------------------
test It should register a macro into the current environment., expects 1 ==> ok
test It should register a macro into a given environment., expects ((default-environment 0 given-environment 0) (default-environment 0 given-environment 1)) ==> ok
passed.
<xire-translate>---------------------------------------------------------------
passed.

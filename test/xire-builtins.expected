Testing xire-builtins ...                                        Testing xire-builtins =========================================================
<(RAW ...)>--------------------------------------------------------------------
test It should be compiled properly in statement context., expects ("" "\" Apple" "banana\ncherry\ndandelion\n") ==> ok
<comment>----------------------------------------------------------------------
test It should be available., expects #t ==> ok
test It should compile a given form into a Vim-script comment., expects ("\"\n" "\" foo\n" "\" foo bar\n") ==> ok
test It should raise error for invalid arguments, expects #<<error>> ==> ok
<(?: expression then-part else-part)>------------------------------------------
test It should be compiled properly., expects "(0 ? 1 : 2)" ==> ok
test It should raise error if the number of operands is less than 3., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 3., expects #<<error>> ==> ok
<(or expression ..2)>----------------------------------------------------------
test It should be compiled properly., expects ("(1 || 2)" "(3 || 4 || 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(and expression ..2)>---------------------------------------------------------
test It should be compiled properly., expects ("(1 && 2)" "(3 && 4 && 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<comparison operators>---------------------------------------------------------
test It should be available., expects ("(1 != 2)" "(1 !=# 2)" "(1 !=? 2)" "(1 !~ 2)" "(1 !~# 2)" "(1 !~? 2)" "(1 < 2)" "(1 <# 2)" "(1 <= 2)" "(1 <=# 2)" "(1 <=? 2)" "(1 <? 2)" "(1 == 2)" "(1 ==# 2)" "(1 ==? 2)" "(1 =~ 2)" "(1 =~# 2)" "(1 =~? 2)" "(1 > 2)" "(1 ># 2)" "(1 >= 2)" "(1 >=# 2)" "(1 >=? 2)" "(1 >? 2)" "(1 is 2)" "(1 is# 2)" "(1 is? 2)" "(1 isnot 2)" "(1 isnot# 2)" "(1 isnot? 2)") ==> ok
<(+ expression ..1)>-----------------------------------------------------------
test It should be compiled properly., expects ("(0 + 999)" "(1 + 2)" "(3 + 4 + 5)") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(- expression ..1)>-----------------------------------------------------------
test It should be compiled properly., expects ("(0 - 999)" "(1 - 2)" "(3 - 4 - 5)") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(.. expression ..2)>----------------------------------------------------------
test It should be compiled properly., expects ("(\"1\" . \"2\")" "(\"3\" . \"4\" . \"5\")") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(* expression ..2)>-----------------------------------------------------------
test It should be compiled properly., expects ("(1 * 2)" "(3 * 4 * 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(/ expression ..2)>-----------------------------------------------------------
test It should be compiled properly., expects ("(1 / 2)" "(3 / 4 / 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(% expression ..2)>-----------------------------------------------------------
test It should be compiled properly., expects ("(1 % 2)" "(3 % 4 % 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(not expression)>-------------------------------------------------------------
test It should be compiled properly., expects "(!0)" ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<(ref array index)>------------------------------------------------------------
test It should be compiled properly., expects "((array)[(123)])" ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 2., expects #<<error>> ==> ok
<(slice array index1 index2)>--------------------------------------------------
test It should be compiled properly., expects ("((array)[(123):(456)])" "((array)[:(456)])" "((array)[(123):])") ==> ok
test It should raise error if the number of operands is less than 3., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 3., expects #<<error>> ==> ok
<(-> dictionary member)>-------------------------------------------------------
test It should be compiled properly., expects "((dictionary).member)" ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 2., expects #<<error>> ==> ok
<(apply function argument ...)>------------------------------------------------
test It should be compiled properly., expects ("(function())" "(function(1))" "(function(1,2))" "(function(1,2,3))") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(list expression ...)>--------------------------------------------------------
test It should be compiled properly., expects ("[]" "[1]" "[1,2]" "[1,2,3]") ==> ok
<(dict (key value) ...)>-------------------------------------------------------
test It should be compiled properly., expects ("{}" "{k1 : v1}" "{k1 : v1,k2 : v2}" "{k1 : v1,k2 : v2,k3 : v3}") ==> ok
<(& option)>-------------------------------------------------------------------
test It should be compiled properly., expects ("&option" "&l:option" "&g:option") ==> ok
test It should raise error if the given option name is not a symbol., expects #<<error>> ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<($ variable)>-----------------------------------------------------------------
test It should be compiled properly., expects "$variable" ==> ok
test It should raise error if the given option name is not a symbol., expects #<<error>> ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<(@ register)>-----------------------------------------------------------------
test It should be compiled properly., expects "@r" ==> ok
test It should raise error if the given option name is not a symbol., expects #<<error>> ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<(begin ...)>------------------------------------------------------------------
test It should be compiled properly., expects ("echo 1\n" "echo 2\necho 3\n" "echo 4\necho 5\necho 6\n") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(if ...)>---------------------------------------------------------------------
test It should be compiled properly., expects ("if 1\necho 2\nendif\n" "if 1\necho 2\nelse\necho 3\nendif\n") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 3., expects #<<error>> ==> ok
<(when ...)>-------------------------------------------------------------------
test It should be compiled properly., expects ("if 1\necho 2\nendif\n" "if 1\necho 2\necho 3\nendif\n") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(unless ...)>-----------------------------------------------------------------
test It should be compiled properly., expects ("if (!1)\necho 2\nendif\n" "if (!1)\necho 2\necho 3\nendif\n") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(while ...)>------------------------------------------------------------------
test It should be compiled properly., expects ("while 1\necho 2\nendwhile\n" "while 1\necho 2\necho 3\nendwhile\n") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(for ...)>--------------------------------------------------------------------
test It, 'for i in list', should be compiled properly., expects ("for i in [1,2,3]\necho i\nendfor\n" "for i in [1,2,3]\necho i\necho i i\nendfor\n") ==> ok
test It, 'for [i, ...] in list-of-lists', should be compiled properly., expects ("for [i] in [[1],[2]]\necho i\nendfor\n" "for [i,j] in [[1,2],[3,4]]\necho i\necho j\nendfor\n") ==> ok
test It should raise error if the number of operands is less than 3., expects #<<error>> ==> ok
<(break)>----------------------------------------------------------------------
test It should be compiled properly., expects "break\n" ==> ok
test It should raise error if the number of operands is greater than 0., expects #<<error>> ==> ok
<(continue)>-------------------------------------------------------------------
test It should be compiled properly., expects "continue\n" ==> ok
test It should raise error if the number of operands is greater than 0., expects #<<error>> ==> ok
<(return ...)>-----------------------------------------------------------------
test It should be compiled properly., expects ("return\n" "return 1\n" "return [1,2,3]\n") ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<(throw ...)>------------------------------------------------------------------
test It should be compiled properly., expects ("throw 1\n" "throw [1,2,3]\n") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<(abs ...)>--------------------------------------------------------------------
test It should be compiled properly., expects "(abs(1))" ==> ok
<(compile-++opt)>--------------------------------------------------------------
test It should return empty string for option list without any content., expects "" ==> ok
test It should return compiled result option list with a few options., expects " ++encoding=utf-8 ++fileformat=unix" ==> ok
test It should succeed for ordinary option list with all options., expects " ++bad=X ++binary ++edit ++encoding=utf-8 ++fileformat=unix ++nobinary" ==> ok
test It should fail for invalid option list., expects #<<error>> ==> ok
<(compile-path)>---------------------------------------------------------------
test It should compile a valid path properly., expects ("`='foo''bar'`" "#" "#3" "`echo 'fo\\\\o'`" "`=(\"foo\" . \"bar\")`" "**/%<.[ch]") ==> ok
test It should fail for invalid path., expects #<<error>> ==> ok
<(compile-paths)>--------------------------------------------------------------
test It should compile valid paths properly., expects "`='foo''bar'` # #3 `echo 'fo\\\\o'` `=(\"foo\" . \"bar\")` **/%<.[ch]" ==> ok
test It should fail for invalid paths., expects #<<error>> ==> ok
<(define-xire-statement-modifier)>---------------------------------------------
test It should define a valid modifier., expects ("ctrl delete\n" "ctrl alt delete\n") ==> ok
test It should not support multiple statements at the moment., expects #<<error>> ==> ok
test It should fail if trailing script is not a valid statement., expects #<<error>> ==> ok
<(escape-path)>----------------------------------------------------------------
test It should escape a given path properly., expects ("`=''`" "`=''''`" "`='\\'`" "`='\"'`" "`='%'`" "`='#'`" "`='|'`" "`='''\\\" %#|'`" "`='Apple Banana Cherry'`") ==> ok
test It should fail for non-string argument., expects #<<error>> ==> ok
<(parse-++opt)>----------------------------------------------------------------
test It should return the null list for option list without any content., expects () ==> ok
test It should succeed for ordinary option list with a few options., expects ("++encoding=utf-8" "++fileformat=unix") ==> ok
test It should succeed for ordinary option list with all options., expects ("++bad=X" "++binary" "++edit" "++encoding=utf-8" "++fileformat=unix" "++nobinary") ==> ok
test It should fail for invalid option list., expects #<<error>> ==> ok
<(path-pattern?)>--------------------------------------------------------------
test It should return true for a path., expects (#t #t #t #t #t #t) ==> ok
test It should return false for a non-path., expects (#f #f #f #f #f) ==> ok
<(aboveleft)>------------------------------------------------------------------
test It should be compiled properly., expects "aboveleft edit\n" ==> ok
<(argadd)>---------------------------------------------------------------------
test It should be compiled properly., expects ("argadd `='foo'`\n" "argadd `='foo'` `='bar'`\n" "8argadd `='foo'` `='bar'`\n") ==> ok
test It should fail without any argument., expects #<<error>> ==> ok
test It should fail with invalid path., expects #<<error>> ==> ok
test It should fail without a path., expects #<<error>> ==> ok
<(argedit)>--------------------------------------------------------------------
test It should be compiled properly., expects ("argedit `='foo'`\n" "argedit ++encoding=utf-8 `='foo'`\n" "8argedit ++encoding=utf-8 `='foo'`\n") ==> ok
test It should fail without any argument., expects #<<error>> ==> ok
test It should fail with invalid path., expects #<<error>> ==> ok
test It should fail without a path., expects #<<error>> ==> ok
<(argedit!)>-------------------------------------------------------------------
test It should be compiled properly., expects ("argedit! `='foo'`\n" "argedit! ++encoding=utf-8 `='foo'`\n" "8argedit! ++encoding=utf-8 `='foo'`\n") ==> ok
test It should fail without any argument., expects #<<error>> ==> ok
test It should fail with invalid path., expects #<<error>> ==> ok
test It should fail without a path., expects #<<error>> ==> ok
<(args)>-----------------------------------------------------------------------
test It should be compiled properly., expects ("args\n" "args ++encoding=utf-8 `='foo'`\n" "args **/*.c **/*.h\n") ==> ok
test It should fail for invalid argument., expects #<<error>> ==> ok
<(args!)>----------------------------------------------------------------------
test It should be compiled properly., expects ("args!\n" "args! ++encoding=utf-8 `='foo'`\n" "args! **/*.c **/*.h\n") ==> ok
test It should fail for invalid argument., expects #<<error>> ==> ok
<(ascii)>----------------------------------------------------------------------
test It should be compiled properly., expects "ascii\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(belowright)>-----------------------------------------------------------------
test It should be compiled properly., expects "belowright edit\n" ==> ok
<(botright)>-------------------------------------------------------------------
test It should be compiled properly., expects "botright edit\n" ==> ok
<(browse)>---------------------------------------------------------------------
test It should be compiled properly., expects "browse edit\n" ==> ok
<(buffers)>--------------------------------------------------------------------
test It should be compiled properly., expects "buffers\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "buffers!\n" ==> ok
<(changes)>--------------------------------------------------------------------
test It should be compiled properly., expects "changes\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(checkpath)>------------------------------------------------------------------
test It should be compiled properly., expects "checkpath\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "checkpath!\n" ==> ok
<(close)>----------------------------------------------------------------------
test It should be compiled properly., expects "close\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "close!\n" ==> ok
<(comclear)>-------------------------------------------------------------------
test It should be compiled properly., expects "comclear\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(confirm)>--------------------------------------------------------------------
test It should be compiled properly., expects "confirm edit\n" ==> ok
<(cquit)>----------------------------------------------------------------------
test It should be compiled properly., expects "cquit\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "cquit!\n" ==> ok
<(diffoff)>--------------------------------------------------------------------
test It should be compiled properly., expects "diffoff\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "diffoff!\n" ==> ok
<(diffthis)>-------------------------------------------------------------------
test It should be compiled properly., expects "diffthis\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(diffupdate)>-----------------------------------------------------------------
test It should be compiled properly., expects "diffupdate\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(echo expression ...)>--------------------------------------------------------
test It should be compiled properly., expects ("echo \n" "echo 1\n" "echo 1 2\n" "echo 1 (2 + 3)\n") ==> ok
<(edit)>-----------------------------------------------------------------------
test It should be compiled properly., expects ("edit\n" "edit `='ordinary-path'`\n" "edit `='path with spaces'`\n" "edit `='path''with\\strange`characters'`\n" "edit #\n" "edit #3\n" "edit `=(\"foo\" . \"bar\")`\n" "edit `find . -name ver\\\\*.c -print`\n" "edit ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(edit!)>----------------------------------------------------------------------
test It should be compiled properly., expects ("edit!\n" "edit! `='ordinary-path'`\n" "edit! `='path with spaces'`\n" "edit! `='path''with\\strange`characters'`\n" "edit! #\n" "edit! #3\n" "edit! `=(\"foo\" . \"bar\")`\n" "edit! `find . -name ver\\\\*.c -print`\n" "edit! ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(enew)>-----------------------------------------------------------------------
test It should be compiled properly., expects "enew\n" ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(enew!)>----------------------------------------------------------------------
test It should be compiled properly., expects "enew!\n" ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(ex)>-------------------------------------------------------------------------
test It should be compiled properly., expects ("ex\n" "ex `='ordinary-path'`\n" "ex `='path with spaces'`\n" "ex `='path''with\\strange`characters'`\n" "ex #\n" "ex #3\n" "ex `=(\"foo\" . \"bar\")`\n" "ex `find . -name ver\\\\*.c -print`\n" "ex ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(ex!)>------------------------------------------------------------------------
test It should be compiled properly., expects ("ex!\n" "ex! `='ordinary-path'`\n" "ex! `='path with spaces'`\n" "ex! `='path''with\\strange`characters'`\n" "ex! #\n" "ex! #3\n" "ex! `=(\"foo\" . \"bar\")`\n" "ex! `find . -name ver\\\\*.c -print`\n" "ex! ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(execute)>--------------------------------------------------------------------
test It should be compiled properly., expects ("execute\n" "execute \"echo\"\n" "execute \"echo\" (1 + 3)\n") ==> ok
test It should fail if invalid expression is given., expects #<<error>> ==> ok
<(exusage)>--------------------------------------------------------------------
test It should be compiled properly., expects "exusage\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(file)>-----------------------------------------------------------------------
test It should be compiled properly., expects ("file\n" "0file\n" "file `='foo bar baz'`\n" "file #3\n") ==> ok
test It should fail if too many arguments are given., expects #<<error>> ==> ok
test It should fail if non-#f and non-string argument is given., expects #<<error>> ==> ok
<(file!)>----------------------------------------------------------------------
test It should be compiled properly., expects ("file!\n" "0file!\n" "file! `='foo bar baz'`\n" "file! #3\n") ==> ok
test It should fail if too many arguments are given., expects #<<error>> ==> ok
test It should fail if non-#f and non-string argument is given., expects #<<error>> ==> ok
<(files)>----------------------------------------------------------------------
test It should be compiled properly., expects "files\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "files!\n" ==> ok
<(find)>-----------------------------------------------------------------------
test It should be compiled properly., expects ("find\n" "find `='ordinary-path'`\n" "find `='path with spaces'`\n" "find `='path''with\\strange`characters'`\n" "find #\n" "find #3\n" "find `=(\"foo\" . \"bar\")`\n" "find `find . -name ver\\\\*.c -print`\n" "find ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(find!)>----------------------------------------------------------------------
test It should be compiled properly., expects ("find!\n" "find! `='ordinary-path'`\n" "find! `='path with spaces'`\n" "find! `='path''with\\strange`characters'`\n" "find! #\n" "find! #3\n" "find! `=(\"foo\" . \"bar\")`\n" "find! `find . -name ver\\\\*.c -print`\n" "find! ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(finish)>---------------------------------------------------------------------
test It should be compiled properly., expects "finish\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(fixdel)>---------------------------------------------------------------------
test It should be compiled properly., expects "fixdel\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(function)>-------------------------------------------------------------------
test It should be compiled properly without any option., expects "function F(a,b,c,...)\nlet sum = (a:a + a:b + a:c + a:000)\nreturn sum\nendfunction\n" ==> ok
test It should be compiled properly with bang., expects "function! F(a,b,c,...)\nlet sum = (a:a + a:b + a:c + a:000)\nreturn sum\nendfunction\n" ==> ok
test It should be compiled properly with attributes., expects "function F(a,b,c,...) abort dict range\nlet sum = (a:a + a:b + a:c + a:000)\nreturn sum\nendfunction\n" ==> ok
<(hide)>-----------------------------------------------------------------------
test It should be compiled properly., expects "hide edit\n" ==> ok
<(intro)>----------------------------------------------------------------------
test It should be compiled properly., expects "intro\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(jumps)>----------------------------------------------------------------------
test It should be compiled properly., expects "jumps\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(keepalt)>--------------------------------------------------------------------
test It should be compiled properly., expects "keepalt edit\n" ==> ok
<(keepjumps)>------------------------------------------------------------------
test It should be compiled properly., expects "keepjumps edit\n" ==> ok
<(keepmarks)>------------------------------------------------------------------
test It should be compiled properly., expects "keepmarks edit\n" ==> ok
<(leftabove)>------------------------------------------------------------------
test It should be compiled properly., expects "leftabove edit\n" ==> ok
<(let)>------------------------------------------------------------------------
test It should be compiled properly., expects ("let\n" "let variable\n" "let s:\n" "let apple = (1 + 2)\n" "let g:apple = \"sweet\"\n" "let @a = \"sweet\"\n" "let &apple = \"sweet\"\n" "let &l:apple = \"sweet\"\n" "let ((apple)[((1 + 2))]) = \"sweet\"\n" "let ((apple)[(\"core\")]) = \"bitter\"\n" "let ((apple)[(1):(2)]) = \"empty\"\n") ==> ok
test It should fail for invalid form - too many arguments., expects #<<error>> ==> ok
test It should fail for invalid form - invalid expression., expects #<<error>> ==> ok
test It should fail for invalid form - invalid variable name., expects #<<error>> ==> ok
<(loadkeymap)>-----------------------------------------------------------------
test It should be compiled properly., expects "loadkeymap\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(lockmarks)>------------------------------------------------------------------
test It should be compiled properly., expects "lockmarks edit\n" ==> ok
<(ls)>-------------------------------------------------------------------------
test It should be compiled properly., expects "ls\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "ls!\n" ==> ok
<(messages)>-------------------------------------------------------------------
test It should be compiled properly., expects "messages\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(noautocmd)>------------------------------------------------------------------
test It should be compiled properly., expects "noautocmd edit\n" ==> ok
<(nohlsearch)>-----------------------------------------------------------------
test It should be compiled properly., expects "nohlsearch\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(oldfiles)>-------------------------------------------------------------------
test It should be compiled properly., expects "oldfiles\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "oldfiles!\n" ==> ok
<(only)>-----------------------------------------------------------------------
test It should be compiled properly., expects "only\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "only!\n" ==> ok
<(options)>--------------------------------------------------------------------
test It should be compiled properly., expects "options\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(pclose)>---------------------------------------------------------------------
test It should be compiled properly., expects "pclose\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "pclose!\n" ==> ok
<(preserve)>-------------------------------------------------------------------
test It should be compiled properly., expects "preserve\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(ptlast)>---------------------------------------------------------------------
test It should be compiled properly., expects "ptlast\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "ptlast!\n" ==> ok
<(pwd)>------------------------------------------------------------------------
test It should be compiled properly., expects "pwd\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(qall)>-----------------------------------------------------------------------
test It should be compiled properly., expects "qall\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "qall!\n" ==> ok
<(quit)>-----------------------------------------------------------------------
test It should be compiled properly., expects "quit\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "quit!\n" ==> ok
<(quitall)>--------------------------------------------------------------------
test It should be compiled properly., expects "quitall\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "quitall!\n" ==> ok
<(redo)>-----------------------------------------------------------------------
test It should be compiled properly., expects "redo\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(redraw)>---------------------------------------------------------------------
test It should be compiled properly., expects "redraw\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "redraw!\n" ==> ok
<(redrawstatus)>---------------------------------------------------------------
test It should be compiled properly., expects "redrawstatus\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "redrawstatus!\n" ==> ok
<(rightbelow)>-----------------------------------------------------------------
test It should be compiled properly., expects "rightbelow edit\n" ==> ok
<(sandbox)>--------------------------------------------------------------------
test It should be compiled properly., expects "sandbox edit\n" ==> ok
<(sbfirst)>--------------------------------------------------------------------
test It should be compiled properly., expects "sbfirst\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(sblast)>---------------------------------------------------------------------
test It should be compiled properly., expects "sblast\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(sbrewind)>-------------------------------------------------------------------
test It should be compiled properly., expects "sbrewind\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(scriptnames)>----------------------------------------------------------------
test It should be compiled properly., expects "scriptnames\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(set)>------------------------------------------------------------------------
test It should be compiled properly., expects ("set\n" "set all\n" "set termcap\n" "set wrap?\n" "set wrap\n" "set nowrap\n" "set wrap!\n" "set invwrap\n" "set wrap&\n" "set wrap&vi\n" "set wrap&vim\n" "set all&\n" "set wrap<\n") ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(setglobal)>------------------------------------------------------------------
test It should be compiled properly., expects ("setglobal\n" "setglobal all\n" "setglobal termcap\n" "setglobal wrap?\n" "setglobal wrap\n" "setglobal nowrap\n" "setglobal wrap!\n" "setglobal invwrap\n" "setglobal wrap&\n" "setglobal wrap&vi\n" "setglobal wrap&vim\n" "setglobal all&\n" "setglobal wrap<\n") ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(setlocal)>-------------------------------------------------------------------
test It should be compiled properly., expects ("setlocal\n" "setlocal all\n" "setlocal termcap\n" "setlocal wrap?\n" "setlocal wrap\n" "setlocal nowrap\n" "setlocal wrap!\n" "setlocal invwrap\n" "setlocal wrap&\n" "setlocal wrap&vi\n" "setlocal wrap&vim\n" "setlocal all&\n" "setlocal wrap<\n") ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(shell)>----------------------------------------------------------------------
test It should be compiled properly., expects "shell\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(silent)>---------------------------------------------------------------------
test It should be compiled properly., expects "silent edit\n" ==> ok
<(spelldump)>------------------------------------------------------------------
test It should be compiled properly., expects "spelldump\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "spelldump!\n" ==> ok
<(spellinfo)>------------------------------------------------------------------
test It should be compiled properly., expects "spellinfo\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(spellrepall)>----------------------------------------------------------------
test It should be compiled properly., expects "spellrepall\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(startgreplace)>--------------------------------------------------------------
test It should be compiled properly., expects "startgreplace\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "startgreplace!\n" ==> ok
<(startinsert)>----------------------------------------------------------------
test It should be compiled properly., expects "startinsert\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "startinsert!\n" ==> ok
<(startreplace)>---------------------------------------------------------------
test It should be compiled properly., expects "startreplace\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "startreplace!\n" ==> ok
<(stop)>-----------------------------------------------------------------------
test It should be compiled properly., expects "stop\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "stop!\n" ==> ok
<(stopinsert)>-----------------------------------------------------------------
test It should be compiled properly., expects "stopinsert\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "stopinsert!\n" ==> ok
<(suspend)>--------------------------------------------------------------------
test It should be compiled properly., expects "suspend\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "suspend!\n" ==> ok
<(swapname)>-------------------------------------------------------------------
test It should be compiled properly., expects "swapname\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(syncbind)>-------------------------------------------------------------------
test It should be compiled properly., expects "syncbind\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(tab)>------------------------------------------------------------------------
test It should be compiled properly., expects "tab edit\n" ==> ok
<(tabfirst)>-------------------------------------------------------------------
test It should be compiled properly., expects "tabfirst\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(tablast)>--------------------------------------------------------------------
test It should be compiled properly., expects "tablast\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(tabonly)>--------------------------------------------------------------------
test It should be compiled properly., expects "tabonly\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "tabonly!\n" ==> ok
<(tabrewind)>------------------------------------------------------------------
test It should be compiled properly., expects "tabrewind\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(tabs)>-----------------------------------------------------------------------
test It should be compiled properly., expects "tabs\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(tags)>-----------------------------------------------------------------------
test It should be compiled properly., expects "tags\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(tlast)>----------------------------------------------------------------------
test It should be compiled properly., expects "tlast\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "tlast!\n" ==> ok
<(topleft)>--------------------------------------------------------------------
test It should be compiled properly., expects "topleft edit\n" ==> ok
<(undojoin)>-------------------------------------------------------------------
test It should be compiled properly., expects "undojoin\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(undolist)>-------------------------------------------------------------------
test It should be compiled properly., expects "undolist\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(unsilent)>-------------------------------------------------------------------
test It should be compiled properly., expects "unsilent edit\n" ==> ok
<(verbose)>--------------------------------------------------------------------
test It should be compiled properly., expects "verbose edit\n" ==> ok
<(vertical)>-------------------------------------------------------------------
test It should be compiled properly., expects "vertical edit\n" ==> ok
<(view)>-----------------------------------------------------------------------
test It should be compiled properly., expects ("view\n" "view `='ordinary-path'`\n" "view `='path with spaces'`\n" "view `='path''with\\strange`characters'`\n" "view #\n" "view #3\n" "view `=(\"foo\" . \"bar\")`\n" "view `find . -name ver\\\\*.c -print`\n" "view ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(view!)>----------------------------------------------------------------------
test It should be compiled properly., expects ("view!\n" "view! `='ordinary-path'`\n" "view! `='path with spaces'`\n" "view! `='path''with\\strange`characters'`\n" "view! #\n" "view! #3\n" "view! `=(\"foo\" . \"bar\")`\n" "view! `find . -name ver\\\\*.c -print`\n" "view! ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(visual)>---------------------------------------------------------------------
test It should be compiled properly., expects ("visual\n" "visual `='ordinary-path'`\n" "visual `='path with spaces'`\n" "visual `='path''with\\strange`characters'`\n" "visual #\n" "visual #3\n" "visual `=(\"foo\" . \"bar\")`\n" "visual `find . -name ver\\\\*.c -print`\n" "visual ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(visual!)>--------------------------------------------------------------------
test It should be compiled properly., expects ("visual!\n" "visual! `='ordinary-path'`\n" "visual! `='path with spaces'`\n" "visual! `='path''with\\strange`characters'`\n" "visual! #\n" "visual! #3\n" "visual! `=(\"foo\" . \"bar\")`\n" "visual! `find . -name ver\\\\*.c -print`\n" "visual! ++encoding=utf-8 ++fileformat=unix `='foo'`\n") ==> ok
test It should fail for invalid form., expects #<<error>> ==> ok
<(viusage)>--------------------------------------------------------------------
test It should be compiled properly., expects "viusage\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(wall)>-----------------------------------------------------------------------
test It should be compiled properly., expects "wall\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "wall!\n" ==> ok
<(X)>--------------------------------------------------------------------------
test It should be compiled properly., expects "X\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should fail if bang is given., expects #<<error>> ==> ok
<(xall)>-----------------------------------------------------------------------
test It should be compiled properly., expects "xall\n" ==> ok
test It should fail if extra argument is given., expects #<<error>> ==> ok
test It should be compiled properly with bang., expects "xall!\n" ==> ok
passed.
passed.

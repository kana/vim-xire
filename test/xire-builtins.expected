Testing xire-builtins ...                                        Testing xire-builtins =========================================================
<(?: expression then-part else-part)>------------------------------------------
test It should be compiled properly., expects "(0 ? 1 : 2)" ==> ok
test It should raise error if the number of operands is less than 3., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 3., expects #<<error>> ==> ok
<(or expression ..2)>----------------------------------------------------------
test It should be compiled properly., expects ("(1 || 2)" "(3 || 4 || 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(and expression ..2)>---------------------------------------------------------
test It should be compiled properly., expects ("(1 && 2)" "(3 && 4 && 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<comparison operators>---------------------------------------------------------
test It should be available., expects ("(1 != 2)" "(1 !=# 2)" "(1 !=? 2)" "(1 !~ 2)" "(1 !~# 2)" "(1 !~? 2)" "(1 < 2)" "(1 <# 2)" "(1 <= 2)" "(1 <=# 2)" "(1 <=? 2)" "(1 <? 2)" "(1 == 2)" "(1 ==# 2)" "(1 ==? 2)" "(1 =~ 2)" "(1 =~# 2)" "(1 =~? 2)" "(1 > 2)" "(1 ># 2)" "(1 >= 2)" "(1 >=# 2)" "(1 >=? 2)" "(1 >? 2)" "(1 is 2)" "(1 is# 2)" "(1 is? 2)" "(1 isnot 2)" "(1 isnot# 2)" "(1 isnot? 2)") ==> ok
<(+ expression ..1)>-----------------------------------------------------------
test It should be compiled properly., expects ("(0 + 999)" "(1 + 2)" "(3 + 4 + 5)") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(- expression ..1)>-----------------------------------------------------------
test It should be compiled properly., expects ("(0 - 999)" "(1 - 2)" "(3 - 4 - 5)") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(.. expression ..2)>----------------------------------------------------------
test It should be compiled properly., expects ("(\"1\" . \"2\")" "(\"3\" . \"4\" . \"5\")") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(* expression ..2)>-----------------------------------------------------------
test It should be compiled properly., expects ("(1 * 2)" "(3 * 4 * 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(/ expression ..2)>-----------------------------------------------------------
test It should be compiled properly., expects ("(1 / 2)" "(3 / 4 / 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(% expression ..2)>-----------------------------------------------------------
test It should be compiled properly., expects ("(1 % 2)" "(3 % 4 % 5)") ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
<(not expression)>-------------------------------------------------------------
test It should be compiled properly., expects "(!0)" ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<(ref array index)>------------------------------------------------------------
test It should be compiled properly., expects "((array)[(123)])" ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 2., expects #<<error>> ==> ok
<(slice array index1 index2)>--------------------------------------------------
test It should be compiled properly., expects "((array)[(123):(456)])" ==> ok
test It should raise error if the number of operands is less than 3., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 3., expects #<<error>> ==> ok
<(-> dictionary member)>-------------------------------------------------------
test It should be compiled properly., expects "((dictionary).member)" ==> ok
test It should raise error if the number of operands is less than 2., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 2., expects #<<error>> ==> ok
<(apply function argument ...)>------------------------------------------------
test It should be compiled properly., expects ("(function())" "(function(1))" "(function(1,2))" "(function(1,2,3))") ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
<(list expression ...)>--------------------------------------------------------
test It should be compiled properly., expects ("[]" "[1]" "[1,2]" "[1,2,3]") ==> ok
<(dict (key value) ...)>-------------------------------------------------------
test It should be compiled properly., expects ("{}" "{k1 : v1}" "{k1 : v1,k2 : v2}" "{k1 : v1,k2 : v2,k3 : v3}") ==> ok
<(& option)>-------------------------------------------------------------------
test It should be compiled properly., expects ("&option" "&l:option" "&g:option") ==> ok
test It should raise error if the given option name is not a symbol., expects #<<error>> ==> ok
test It should raise error if the number of operands is less than 1., expects #<<error>> ==> ok
test It should raise error if the number of operands is greater than 1., expects #<<error>> ==> ok
<comment>----------------------------------------------------------------------
test It should be available., expects #t ==> ok
test It should compile a given form into a Vim-script comment., expects (("\"" () "\n") ("\"" (" " "foo") "\n") ("\"" (" " "foo" " " "bar") "\n")) ==> ok
test It should raise error for invalid arguments, expects #<<error>> ==> ok
test It should raise error for non-statement context, expects #<<error>> ==> ok
passed.
passed.

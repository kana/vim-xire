; Test: xire-basics  {{{1

(use gauche.test)
(test-start "xire-basics")
(load "./bin/xirec")
(set! main #f)

(define (hash-table-sorted-keys ht)
  (sort-by (hash-table-keys ht) x->string))




(test-section "define-xire-macro")  ;{{{1

(test* "It should define a xire macro in the current environment."
       '(#f (< (original-form) = context >))
       (parameterize ([xire-environment (make <xire-environment>)])
         (let* ([get-values
                  (lambda ()
                    (let1 expander (xire-lookup-macro 'amane)
                      (and expander (expander '(original-form) 'context))))]
                [before-values (get-values)])
           (define-xire-macro (amane form context)
             (list '< form '= context '>))
           (list before-values (get-values)))))




(test-section "xire-compile")  ;{{{1

(test* "It should raise error for a malformed script: ()"
       (test-error <error>)
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-compile '() (make <xire-context>))))

(test* "It should raise error for a malformed script: 'invalid-expression"
       (test-error <error>)
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-compile 'invalid-expression (make <xire-context>))))

(test* "It should raise error for a malformed script: (no-such-macro)"
       (test-error <error>)
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-compile '(no-such-macro) (make <xire-context>))))

(test* "It should raise error for a malformed script: (macro invlaid argument)"
       (test-error <error>)
       (parameterize ([xire-environment (make <xire-environment>)])
         (define-xire-macro (comment form context)
           (match-let1 (_ comment-string) form
             `("\"" ,comment-string)))
         (xire-compile '(comment "wrong" "argument") (make <xire-context>))))

(test* "It should succeed to compile a valid script."
       '("\"" "I am a comment!")
       (parameterize ([xire-environment (make <xire-environment>)])
         (define-xire-macro (comment form context)
           (match-let1 (_ comment-string) form
             `("\"" ,comment-string)))
         (xire-compile '(comment "I am a comment!") (make <xire-context>))))




(test-section "xire-context")  ;{{{1

; FIXME: NIY




(test-section "xire-environment")  ;{{{1

(test* "It should exist."
       #t
       (is-a? (xire-environment) <xire-environment>))

(test* "It should have some entries in its macro table by default."
       #t
       (<= 0 (hash-table-num-entries (ref (xire-environment) 'macros))))

(test* "It should be a parameter."
       '(overridden <xire-environment>)
       (list (parameterize ([xire-environment 'overridden])
                           (xire-environment))
             (class-name (class-of (xire-environment)))))




(test-section "xire-environment-copy")  ;{{{1

(test* "It should copy the current environment"
       '((#t #t)
         (#f #t)
         ((a) (a b)))
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-register-macro! 'a (lambda (form) 'a))
         (let1 environment-copied (xire-environment-copy)
           (xire-register-macro! 'b (lambda (form) 'c) environment-copied)
           `((,(boolean (xire-lookup-macro 'a (xire-environment)))
              ,(boolean (xire-lookup-macro 'a environment-copied)))
             (,(boolean (xire-lookup-macro 'b (xire-environment)))
              ,(boolean (xire-lookup-macro 'b environment-copied)))
             (,(hash-table-sorted-keys (ref (xire-environment) 'macros))
              ,(hash-table-sorted-keys (ref environment-copied 'macros)))))))

(test* "It should copy a given environment"
       '((#t #f #f)
         (#f #t #t)
         (#f #f #t)
         ((a) (b) (b c)))
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-register-macro! 'a (lambda (form) 'a))
         (let* ([environment-original
                  (let1 environment (make <xire-environment>)
                    (xire-register-macro! 'b (lambda (form) 'b) environment)
                    environment)]
                [environment-copied
                  (let1
                    environment (xire-environment-copy environment-original)
                    (xire-register-macro! 'c (lambda (form) 'c) environment)
                    environment)])
           `((,(boolean (xire-lookup-macro 'a (xire-environment)))
              ,(boolean (xire-lookup-macro 'a environment-original))
              ,(boolean (xire-lookup-macro 'a environment-copied)))
             (,(boolean (xire-lookup-macro 'b (xire-environment)))
              ,(boolean (xire-lookup-macro 'b environment-original))
              ,(boolean (xire-lookup-macro 'b environment-copied)))
             (,(boolean (xire-lookup-macro 'c (xire-environment)))
              ,(boolean (xire-lookup-macro 'c environment-original))
              ,(boolean (xire-lookup-macro 'c environment-copied)))
             (,(hash-table-sorted-keys (ref (xire-environment) 'macros))
              ,(hash-table-sorted-keys (ref environment-original 'macros))
              ,(hash-table-sorted-keys (ref environment-copied 'macros)))))))




(test-section "xire-lookup-macro")  ;{{{1

(test* "It should return #f if there is no macro with the given name."
       #f
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-lookup-macro 'there-is-no-such-macro)))

(test* "It should return the expander of a registered macro."
       '(expanded-form (original-form))
       (parameterize ([xire-environment (make <xire-environment>)])
         (define (expander form)
           (list 'expanded-form form))
         (xire-register-macro! 'sasara expander)
         ((xire-lookup-macro 'sasara) '(original-form))))

(test* "It should look up macro from a given environment."
       '((default-environment #f given-environment #f)
         (default-environment #f given-environment #t))
       (parameterize ([xire-environment (make <xire-environment>)])
         (let* ([environment (make <xire-environment>)]
                [expand
                  (lambda (expander)
                    (and expander (expander '(original-form))))]
                [get-values
                  (lambda ()
                    (list 'default-environment
                          (expand (xire-lookup-macro 'mashiro
                                                     (xire-environment)))
                          'given-environment
                          (expand (xire-lookup-macro 'mashiro environment))))]
                [before-values (get-values)])
           (xire-register-macro! 'mashiro
                                 (lambda (form . args) #t)
                                 environment)
           (list before-values (get-values)))))




(test-section "xire-register-macro!")  ;{{{1

(test* "It should register a macro into the current environment."
       1
       (parameterize ([xire-environment (make <xire-environment>)])
         (xire-register-macro! 'arisa
                               (lambda (form . args) 'arisa))
         (hash-table-num-entries (ref (xire-environment) 'macros))))

(test* "It should register a macro into a given environment."
       '((default-environment 0 given-environment 0)
         (default-environment 0 given-environment 1))
       (parameterize ([xire-environment (make <xire-environment>)])
         (let* ([environment (make <xire-environment>)]
                [get-values
                  (lambda ()
                    (list 'default-environment
                          (hash-table-num-entries
                            (ref (xire-environment) 'macros))
                          'given-environment
                          (hash-table-num-entries
                            (ref environment 'macros))))]
                [before-values (get-values)])
           (xire-register-macro! 'sasara
                                 (lambda (form . args) 'sasara)
                                 environment)
           (list before-values (get-values)))))




(test-section "xire-translate")  ;{{{1

(test* "It should raise error for a malformed script: ()"
       (test-error <error>)
       (call-with-string-io "()"
         (cut xire-translate <> <> :environment (make <xire-environment>))))

(test* "It should raise error for a malformed script: 'invalid-expression"
       (test-error <error>)
       (call-with-string-io "invalid-expression"
         (cut xire-translate <> <> :environment (make <xire-environment>))))

(test* "It should raise error for a malformed script: (no-such-macro)"
       (test-error <error>)
       (parameterize ([xire-environment (make <xire-environment>)])
         (call-with-string-io "(no-such-macro)"
           (cut xire-translate <> <>))))

(test* "It should raise error for a malformed script: (macro invlaid argument)"
       (test-error <error>)
       (parameterize ([xire-environment (make <xire-environment>)])
         (define-xire-macro (comment form context)
           (match-let1 (_ comment-string) form
             `("\"" ,comment-string)))
         (call-with-string-io "(comment \"wrong\" \"argument\")"
           (cut xire-translate <> <>))))

(test* "It should succeed to compile a valid script: (macro vlaid argument)"
       "\"valid argument"
       (parameterize ([xire-environment (make <xire-environment>)])
         (define-xire-macro (comment form context)
           (match-let1 (_ comment-string) form
             `("\"" ,comment-string)))
         (call-with-string-io "(comment \"valid argument\")"
           (cut xire-translate <> <>))))

(test* "It should succeed to compile the empty script."
       ""
       (call-with-string-io ""
         (cut xire-translate <> <> :environment (make <xire-environment>))))




;(test-section "template")  ;{{{1

;(test* "title"
;       expected-value
;       test-expression)




(test-end)  ;{{{1




; __END__
; vim: filetype=scheme foldmethod=marker

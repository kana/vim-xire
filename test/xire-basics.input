; Test: xire-basics  {{{1

(use gauche.test)
(test-start "xire-basics")
(load "./bin/xirec")
(set! main #f)

(define (hash-table-sorted-keys ht)
  (sort-by (hash-table-keys ht) x->string))




(test-section "define-xire-macro")  ;{{{1

(test* "It should define a xire macro in the current context."
       '(#f (< (original-form) >))
       (parameterize ([xire-context (make <xire-context>)])
         (let* ([get-values
                  (lambda ()
                    (let1 expander (xire-lookup-macro 'amane)
                      (and expander (expander '(original-form)))))]
                [before-values (get-values)])
           (define-xire-macro (amane form)
             (list '< form '>))
           (list before-values (get-values)))))




(test-section "xire-context")  ;{{{1

(test* "It should exist."
       #t
       (is-a? (xire-context) <xire-context>))

(test* "It should have some entries in its macro table by default."
       #t
       (<= 0 (hash-table-num-entries (ref (xire-context) 'macros))))

(test* "It should be a parameter."
       '(overridden <xire-context>)
       (list (parameterize ([xire-context 'overridden])
                           (xire-context))
             (class-name (class-of (xire-context)))))




(test-section "xire-context-copy")  ;{{{1

(test* "It should copy the current context"
       '((#t #t)
         (#f #t)
         ((a) (a b)))
       (parameterize ([xire-context (make <xire-context>)])
         (xire-register-macro! 'a (lambda (form) 'a))
         (let1 context-copied (xire-context-copy)
           (xire-register-macro! 'b (lambda (form) 'c) context-copied)
           `((,(boolean (xire-lookup-macro 'a (xire-context)))
              ,(boolean (xire-lookup-macro 'a context-copied)))
             (,(boolean (xire-lookup-macro 'b (xire-context)))
              ,(boolean (xire-lookup-macro 'b context-copied)))
             (,(hash-table-sorted-keys (ref (xire-context) 'macros))
              ,(hash-table-sorted-keys (ref context-copied 'macros)))))))

(test* "It should copy a given context"
       '((#t #f #f)
         (#f #t #t)
         (#f #f #t)
         ((a) (b) (b c)))
       (parameterize ([xire-context (make <xire-context>)])
         (xire-register-macro! 'a (lambda (form) 'a))
         (let* ([context-original
                  (let1 context (make <xire-context>)
                    (xire-register-macro! 'b (lambda (form) 'b) context)
                    context)]
                [context-copied
                  (let1 context (xire-context-copy context-original)
                    (xire-register-macro! 'c (lambda (form) 'c) context)
                    context)])
           `((,(boolean (xire-lookup-macro 'a (xire-context)))
              ,(boolean (xire-lookup-macro 'a context-original))
              ,(boolean (xire-lookup-macro 'a context-copied)))
             (,(boolean (xire-lookup-macro 'b (xire-context)))
              ,(boolean (xire-lookup-macro 'b context-original))
              ,(boolean (xire-lookup-macro 'b context-copied)))
             (,(boolean (xire-lookup-macro 'c (xire-context)))
              ,(boolean (xire-lookup-macro 'c context-original))
              ,(boolean (xire-lookup-macro 'c context-copied)))
             (,(hash-table-sorted-keys (ref (xire-context) 'macros))
              ,(hash-table-sorted-keys (ref context-original 'macros))
              ,(hash-table-sorted-keys (ref context-copied 'macros)))))))




(test-section "xire-lookup-macro")  ;{{{1

(test* "It should return #f if there is no macro with the given name."
       #f
       (parameterize ([xire-context (make <xire-context>)])
         (xire-lookup-macro 'there-is-no-such-macro)))

(test* "It should return the expander of a registered macro."
       '(expanded-form (original-form))
       (parameterize ([xire-context (make <xire-context>)])
         (define (expander form)
           (list 'expanded-form form))
         (xire-register-macro! 'sasara expander)
         ((xire-lookup-macro 'sasara) '(original-form))))

(test* "It should look up macro from a given context."
       '((default-context #f given-context #f)
         (default-context #f given-context #t))
       (parameterize ([xire-context (make <xire-context>)])
         (let* ([context (make <xire-context>)]
                [expand
                  (lambda (expander)
                    (and expander (expander '(original-form))))]
                [get-values
                  (lambda ()
                    (list 'default-context
                          (expand (xire-lookup-macro 'mashiro (xire-context)))
                          'given-context
                          (expand (xire-lookup-macro 'mashiro context))))]
                [before-values (get-values)])
           (xire-register-macro! 'mashiro
                                 (lambda (form . args) #t)
                                 context)
           (list before-values (get-values)))))




(test-section "xire-register-macro!")  ;{{{1

(test* "It should register a macro into the current context."
       1
       (parameterize ([xire-context (make <xire-context>)])
         (xire-register-macro! 'arisa
                               (lambda (form . args) 'arisa))
         (hash-table-num-entries (ref (xire-context) 'macros))))

(test* "It should register a macro into a given context."
       '((default-context 0 given-context 0)
         (default-context 0 given-context 1))
       (parameterize ([xire-context (make <xire-context>)])
         (let* ([context (make <xire-context>)]
                [get-values
                  (lambda ()
                    (list 'default-context
                          (hash-table-num-entries (ref (xire-context) 'macros))
                          'given-context
                          (hash-table-num-entries (ref context 'macros))))]
                [before-values (get-values)])
           (xire-register-macro! 'sasara
                                 (lambda (form . args) 'sasara)
                                 context)
           (list before-values (get-values)))))




;(test-section "template")  ;{{{1

;(test* "title"
;       expected-value
;       test-expression)




(test-end)  ;{{{1




; __END__
; vim: filetype=scheme foldmethod=marker

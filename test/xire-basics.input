; Test: xire-basics  {{{1

(use gauche.test)
(test-start "xire-basics")
(load "./bin/xirec")
(set! main #f)




(test-section "xire-context")  ;{{{1

(test* "It should exist."
       #t
       (is-a? (xire-context) <xire-context>))

(test* "It should have some entries in its macro table by default."
       #t
       (<= 0 (hash-table-num-entries (ref (xire-context) 'macros))))

(test* "It should be a parameter."
       '(overridden <xire-context>)
       (list (parameterize ([xire-context 'overridden])
                           (xire-context))
             (class-name (class-of (xire-context)))))




(test-section "xire-register-macro!")  ;{{{1

(test* "It should register a macro into the current context."
       1
       (parameterize ([xire-context (make <xire-context>)])
         (xire-register-macro! 'arisa
                               (lambda (form . args) 'arisa))
         (hash-table-num-entries (ref (xire-context) 'macros))))

(test* "It should register a macro into a given context."
       '((default-context 0 given-context 0)
         (default-context 0 given-context 1))
       (parameterize ([xire-context (make <xire-context>)])
         (let* ([context (make <xire-context>)]
                [get-values
                  (lambda ()
                    (list 'default-context
                          (hash-table-num-entries (ref (xire-context) 'macros))
                          'given-context
                          (hash-table-num-entries (ref context 'macros))))]
                [before-values (get-values)])
           (xire-register-macro! 'sasara
                                 (lambda (form . args) 'sasara)
                                 context)
           (list before-values (get-values)))))




;(test-section "template")  ;{{{1

;(test* "title"
;       expected-value
;       test-expression)




(test-end)  ;{{{1




; __END__
; vim: filetype=scheme foldmethod=marker
